package com.qqcy.controller;

import java.io.UnsupportedEncodingException;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.qqcy.po.Manager;
import com.qqcy.po.Message;
import com.qqcy.po.Species;
import com.qqcy.po.User;
import com.qqcy.service.ManagerService;
import com.qqcy.service.SpeciesService;
import com.qqcy.service.UserService;
import com.qqcy.util.BaseController;

/**
 * 为用户提供登陆界面
 * 
 * @author Administrator
 *
 */
@Controller
@RequestMapping("/user")
public class UserController extends BaseController {

	@Autowired
	private UserService userService;
	
	@Autowired
	private ManagerService managerService;
	
	@Autowired
	private SpeciesService speciesService;

	@RequestMapping("/register.do")
	public String registerUser(User user, Model model) {
		user.setU_createtime(String.valueOf(new Date().getTime()));
		userService.registerUser(user);

		model.addAttribute("user", user);

		return "Index";
	}

	@RequestMapping("/login.do")
	public String login(User user, Model model,HttpServletRequest request) throws UnsupportedEncodingException {
		if (user == null) {
			return "login";
		}
		Manager manager = new Manager();
		manager.setM_username(user.getU_username());
		manager.setM_password(user.getU_password());
		
		//管理员登录
		if(managerService.login(manager)){
			List<Species> specieses = speciesService.getSpeciesList();
			model.addAttribute("specieses", specieses);
			//将管理员的信息加入session
			model.addAttribute("manager", manager);
			return "GuanliIndex";
		}
		
		//用户登录
		if(userService.loginUser(user)){
			model.addAttribute("user", user);
			return "Index";
		}

		model.addAttribute("loginErr", "账号密码错误！");
		return "login";
	}
	@RequestMapping("/registerValidate.do")
	public @ResponseBody Message registerValidate(User user, Model model) {
	boolean flag=userService.registerValidate(user);
	if(flag){
		//唯一
		Message message=new Message();
		message.setContent("此用户可用");
		message.setDate(new Date());
		return message;
	}else{
		//已存在
		Message message=new Message();
		message.setContent("该用户已存在");
		message.setDate(new Date());
		return message;
		}
	}
}